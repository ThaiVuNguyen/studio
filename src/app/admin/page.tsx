
'use client';

import { useEffect, useState } from 'react';
import { useForm, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { toast } from '@/hooks/use-toast';
import { addQuestion, deleteQuestion, onQuestionsChange, Question } from '@/lib/firebase';
import { Trash2 } from 'lucide-react';

const questionSchema = z.object({
  text: z.string().min(1, 'Question text is required.'),
  options: z.array(z.string().min(1, 'Option cannot be empty.')).min(2, 'At least two options are required.'),
  answer: z.string().min(1, 'Correct answer is required.'),
});

type QuestionFormValues = z.infer<typeof questionSchema>;

export default function AdminDashboard() {
  const [questions, setQuestions] = useState<Question[]>([]);

  useEffect(() => {
    const unsubscribe = onQuestionsChange(setQuestions);
    return () => unsubscribe();
  }, []);

  const form = useForm<QuestionFormValues>({
    resolver: zodResolver(questionSchema),
    defaultValues: {
      text: '',
      options: ['', '', '', ''],
      answer: '',
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'options',
  });

  async function onSubmit(data: QuestionFormValues) {
    if (!data.options.includes(data.answer)) {
      form.setError('answer', {
        type: 'manual',
        message: 'The correct answer must be one of the options.',
      });
      return;
    }
    
    try {
      await addQuestion({
        ...data,
        id: '' // ID is generated by Firestore
      });
      toast({
        title: 'Success!',
        description: 'The new question has been added.',
      });
      form.reset();
    } catch (error) {
      toast({
        title: 'Error',
        description: 'There was a problem adding the question.',
        variant: 'destructive',
      });
    }
  }

  const handleDelete = async (questionId: string) => {
    try {
      await deleteQuestion(questionId);
      toast({
        title: 'Success!',
        description: 'The question has been deleted.',
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'There was a problem deleting the question.',
        variant: 'destructive',
      });
    }
  };


  return (
    <main className="container mx-auto p-8">
      <h1 className="text-3xl font-headline mb-8">Admin Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <Card>
          <CardHeader>
            <CardTitle>Add New Question</CardTitle>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <FormField
                  control={form.control}
                  name="text"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Question Text</FormLabel>
                      <FormControl>
                        <Input placeholder="What is the capital of France?" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div>
                  <Label>Options</Label>
                  <div className="space-y-2 mt-2">
                    {fields.map((field, index) => (
                      <FormField
                        key={field.id}
                        control={form.control}
                        name={`options.${index}`}
                        render={({ field }) => (
                          <FormItem className="flex items-center gap-2">
                            <FormControl>
                              <Input placeholder={`Option ${index + 1}`} {...field} />
                            </FormControl>
                            <Button type="button" variant="ghost" size="icon" onClick={() => remove(index)}>
                              <Trash2 className="h-4 w-4" />
                            </Button>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    ))}
                  </div>
                   <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      className="mt-2"
                      onClick={() => append('')}
                    >
                      Add Option
                    </Button>
                </div>

                <FormField
                  control={form.control}
                  name="answer"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Correct Answer</FormLabel>
                      <FormControl>
                        <Input placeholder="Paris" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <Button type="submit">Add Question</Button>
              </form>
            </Form>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Question List</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-4">
              {questions.length > 0 ? (
                questions.map((q) => (
                  <li key={q.id} className="p-4 border rounded-lg flex justify-between items-center">
                    <p className="flex-1">{q.text}</p>
                    <Button variant="destructive" size="sm" onClick={() => handleDelete(q.id)}>Delete</Button>
                  </li>
                ))
              ) : (
                <p className="text-muted-foreground">No questions yet. Add one to get started!</p>
              )}
            </ul>
          </CardContent>
        </Card>
      </div>
    </main>
  );
}
